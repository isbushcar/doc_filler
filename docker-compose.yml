version: "3.4"

services:
  db:
    image: postgres
    restart: on-failure
    volumes:
      - ./data/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD", "psql", "-c", 'SELECT 1', "-d", "${POSTGRES_DB}",
              "-U", "${POSTGRES_USER}", "-W", "${POSTGRES_PASSWORD}"]
      interval: 10s
      timeout: 10s
      retries: 5
  web:
    image: python:3.8
    working_dir: /app
    command: bash -c 
              "mkdir ${STATIC_ROOT}
                & pip install -r requirements.txt
                && python manage.py collectstatic --no-input
                && python manage.py makemigrations
                && python manage.py migrate
                && python manage.py runserver 0.0.0.0:8001"
    volumes:
      - .:/app
    ports:
      - "8001"
    links:
      - "db:database"
    environment:
      - POSTGRES_NAME=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    depends_on:
      - db
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "http://0.0.0.0:8001/login/", "||", "exit", "1"]
      interval: 60s
      timeout: 10s
      retries: 5
  redis:
    image: redis
    command: redis-server
  celery:
    image: python:3.8
    working_dir: /app
    command: bash -c 
              "pip install -r requirements.txt
                && celery -A doc_filler worker --loglevel=info"
    volumes:
      - .:/app
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    links:
      - "redis:redis"
  nginx:
    image: nginx
    ports:
      - "8000:8000"
    depends_on:
      - web
    volumes:
      - ./nginx_conf:/etc/nginx/conf.d
    links:
      - "web:web_app"
